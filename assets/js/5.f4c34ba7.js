(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{334:function(s,e,t){"use strict";t.r(e);var r=t(0),a=Object(r.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),e("p",[s._v("我为什么要搭建静态博客，怎样进行搭建。接下来我会总结一下这些原因，讲解一下如何零基础快速搭建一个好看实用的博客。文章篇幅过长，我会分几期来进行描述。")]),s._v(" "),e("h2",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),e("p",[s._v("为什么要选择静态网站？首先，静态网站相比对是动态网站，而动态网站则不用说了，目前互联网各大平台可以说都是属于动态网站类型，这类网站非常依赖于服务器，用户基数大，服务器费用也是非常昂贵，因此是需要考虑运营问题的，而用户运营又是运营必不可少的一个环节，不适合个人使用。静态网站的交互性过于薄弱，因此不适合构建大型网站，更适合官方文档，企业网站，或者喜欢“极客”风的个人博客用户，但是优点是安全性好，加载速度快，有多大流量就能撑起多少用户。对于个人来说，静态网站无疑是最合适的，它依托于本地文件，即使不在服务器上部署，我们也可以在本地查看网站的效果。")]),s._v(" "),e("p",[s._v("静态网站生成器有很多，比如Hexo，Hugo，Gatsby，VuePress，Jekyll，另外还有Pelican，Metalsmith，Octopress，Pelican，Middleman，DocPad，Wintersmith，Cactus，HubPress，MkDocs，Docsify等，实在太多了，根本数不过来。根据Github上这些开源的项目的热度来看，主要有Hexo，Hugo，VuePress，Gatsby，Jekyll，WordPress等，作为主流的静态网站生成器，其集成的功能十分强大，技术相对比较成熟，上手难度也比较低。")]),s._v(" "),e("h2",{attrs:{id:"hexo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hexo"}},[s._v("#")]),s._v(" Hexo")]),s._v(" "),e("p",[s._v("作为最早上线的一批静态网站，集成度比较高，功能也比较齐全，文章生成速度中规中矩，上手难度非常低，对于很多大佬来说，这简直就是少儿编程😂。Hexo对中文用户支持很友好，毕竟开发出Hexo的就是台湾人。CSDN、知乎、简书、B站上有大量的教程，官方文档的介绍也非常详细，在电脑上安装Nodejs后，根据文档进行操作，几分钟就能搭建好整个框架，后续更换界面主题和添加各类插件也有大量案例可以参照（白嫖），拿来主义者的福音，小白练手的最佳选择。")]),s._v(" "),e("h2",{attrs:{id:"hugo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hugo"}},[s._v("#")]),s._v(" Hugo")]),s._v(" "),e("p",[s._v("很多人都说Hugo的速度独步天下，确实也是这么回事，跟Hexo相比，Hugo同样的文章字数，不到1s就搞定。说Hugo的速度和Hexo不在一个数量级上，看来并不冤枉。Hugo只需一个二进制文件即可搞定这一些，Hugo的内置文件非常干净，容易上手，不像Hexo还要npm一堆东西才能用。不过缺陷也很明显，功能性的东西需要一定的动手能力，不如Hexo能够安装插件解决来的便利，而且Hugo很多的主题都是外国人开发的，如果看中了某款主题，还需自己“汉化”后才能使用。对比而言，Hexo有着丰富的中文主题，这一点是其他所有都不能与之比拟的优势。")]),s._v(" "),e("h2",{attrs:{id:"vuepress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuepress"}},[s._v("#")]),s._v(" VuePress")]),s._v(" "),e("p",[s._v("VuePress是VUE来驱动的（还有Nuxt），而VUE则是前端三大框架（Angular、React、Vue）之一。这个博客的搭建采用的就是VuePress。对新手来说，上手难度可能比Hexo，Hugo大些，不过现在好多了，一搜有不少VuePress的教程，之前就只有几篇。记得从大二那年，因为看到VuePress官方给的主题简洁美观，很符合我的审美，我就想用VuePress搭建一个博客，但是案例太少，出现了一堆问题无法解决，就放弃了，改用hexo博客。时过境迁，如今再次试了下Vuepress，多亏了xugaoyi和午后南杂等大佬不断开发，可以说很多问题都迎刃而解，主题和插件数量也是直追Hexo。具有SPA（单页应用），一次加载好所需的文件，切换其他页面由JS应用代码直接请求渲染，无需整体刷新。体验起来，速度倒是挺不错的，但也因为是这种原因，所以文章越多，JS脚本也越多，那生成的文件也越多，体积也会稍稍变大，渲染速度要比Hexo、Hugo慢一些，感觉还是有些笨重。")]),s._v(" "),e("h2",{attrs:{id:"gatsby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gatsby"}},[s._v("#")]),s._v(" Gatsby")]),s._v(" "),e("p",[s._v("我没有用过Gatsby这个工具，但是在Github上，Gatsby的Stars数量还是很让人吃惊的。如果你是搞React的，这个工具就非常适合使用了，或者说用React框架的人都用Gatsby的多。而且功能非常强大，丰富的插件系统可以让你从CMS，SaaS服务，数据库以及API等渠道拉去数据。（它应该与Next.js做比对）它的功能强大，但来的的问题是依赖也挺多的，属于重量级别的。没有一定编程基础的人，非常不建议使用Gatsby。对于一个博客，能有自己的内容输出是为首要，而至于用什么搭建，这些只是用来实现的工具罢了。但很多刚开时折腾网站或者博客的人，包括我，都是喜欢先折腾一把用什么工具搭建，是WordPress还是Typecho，还是Ghost，然后转向静态网站了还是想着到底是Hexo，还是Hugo。选定好工具后，又开始折腾主题，这几乎是每一个人的必经之路。")]),s._v(" "),e("h2",{attrs:{id:"jekyll"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jekyll"}},[s._v("#")]),s._v(" Jekyll")]),s._v(" "),e("p",[s._v("Jekyll这个工具我也没有使用过，所以不太了解。根据网上搜索的资料来看，Jekyll由Ruby构建，并且集成到了Github Pages中，在Github上的热度不比Hexo、Hugo低。如果你是WordPress用户，想尝试静态网站，而Jekyll则可以通过importer来做这些事（hexo也有类似插件）。当然，强大的WordPress生态系统也有专门用来全站静态化的插件来实现网站静态化。")]),s._v(" "),e("h2",{attrs:{id:"wordpress"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wordpress"}},[s._v("#")]),s._v(" WordPress")]),s._v(" "),e("p",[s._v("如果你希望后期网站功能扩展更便捷，强烈建议使用WordPress，上千上万的功能扩展插件，基本可以满足你对常用站点功能扩展的需求了。很多功能不需要自己进行二次开发，安装启用个插件就可以实现。如果仅仅是玩一玩儿的话，那么Hexo 就足够了！如果是为了学习一些知识并体验一下，那么VuePress 就可以了！如果是要打造一个属于自己或者企业的用户生态闭环，那么非WordPress莫属了！对于WordPress用户来说，自己的主题，自己的插件只需要学习亿点编程就能打造专属自己的博客，唯一的问题可能是服务器的费用。")])])}),[],!1,null,null,null);e.default=a.exports}}]);